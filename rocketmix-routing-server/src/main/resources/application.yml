portal:
  companyName:
  logoURL:

spring:
  application:
    name: ZuulServer

server:
  port: 8080
  
management:
  endpoints:
    web:
      exposure:
        include:
        - "*"
      cors:
        allowed-origins:
        - "*"  
    jmx:
      exposure:
        include:
        - "*"    

# Zuul is the router. It acts as proxy and dispatched all requests to their endpoints
# To let http authorization headers passed throw te proxy, we create a whitelist in zuul.sensitive-headers
zuul:
  sensitive-headers:
  ribbon-isolation-strategy: thread
  thread-pool:
    use-separate-thread-pools: true
  ignoredPatterns: /admin/logout  
  routes:
    admin:
      path: /admin/**
      url: ${management.server.uri:http://127.0.0.1:8761}/admin
# Ribbon acts as load balancer between microservices
ribbon: 
  ConnectTimeout: 3000
  ReadTimeout: 60000 


# Hystrix wraps calls to microservices to detect failure and redirect response to a common fallback response
# Circuit Breaker helps Hystrix by redirecting response automatically to fallback response if defined thresholds are reached 
# Parameters set according to : https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix.command.default.execution.isolation.strategy: THREAD # Hystrix uses a dedicated threadpool to call microservices to avoid server saturation 
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 60000 # Redirect to fallback if microservice doesn't answer within 60s
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds: 180000 # Opens circuit during 3 minutes to threshold reached
hystrix.command.default.circuitBreaker.errorThresholdPercentage: 50 # Opens circuit if 50% of request failed within a rolling window of 3 minutes 
hystrix.command.default.metrics.rollingStats.timeInMilliseconds: 180000 # Defines a rolling window of 3 minutes
hystrix.command.default.circuitBreaker.requestVolumeThreshold: 20 # Opens circuit if 20 requests failed within a rolling window of 3 minutes 


eureka:
  instance:
    prefer-ip-address: true
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${management.server.uri:http://127.0.0.1:8761}/eureka/


          